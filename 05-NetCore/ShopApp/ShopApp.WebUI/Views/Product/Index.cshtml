@* model ile gönderme için _VİEWİMPORTA tanımlama yaptığımız için sadece bu şekilde modeli çağırabiliriz *@
@model Product

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <title>Product</title>
</head>
<body>
    @* _navbar.cshtml'deki navbarı burada kullanmak için *@
    @* PartialAsync metotu asecron bir metot olduğu için @await kullandık *@
    @await Html.PartialAsync("_navbar")
    @* ındex metotu içinde oluşturduğumuz ViewData ları kullanalım bu şekilde string bir ifade varsa cast işlemi yapmaya gerek yok *@
    @*<h1>@ViewData["Category"]</h1>*@
    @* nesneyi kullanmak için _ViewImports.cshtml dosyasını oluşturalım bu dosyaya tanıttığımız tüm modeller artık view klasoründeki product klasörü içindeki tüm html sayfaları o modelleri tanır import etmek gibi bişey yani modelleri Views içine *@
    @* ve cast işlemi yapalım *@
    @*<h4>@(((Product)ViewData["Product"]).Name)</h4>
        <h4>@(((Product)ViewData["Product"]).Price)</h4>
        <h4>@(((Product)ViewData["Product"]).Description)</h4>*@

    @* viewbag ile taşımak cast yapmak zorunda değiliz *@
    @*<h1>@ViewBag.Category</h1>
        <h4>@ViewBag.Product.Name</h4>
        <h4>@ViewBag.Product.Price</h4>
        <h4>@ViewBag.Product.Description</h4>*@

    @* MODEL *@
    <h1>@ViewBag.Category</h1>
    <h4>@Model.Name</h4>
    <h4>@Model.Price</h4>
    <h4>@Model.Description</h4>

</body>
</html>